{"ast":null,"code":"import _defineProperty from \"D:/Angular Projects/angular-openlayers/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/geojson.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"./components/map/map.component\";\nimport * as i5 from \"./components/scaleline/scaleline.component\";\nimport * as i6 from \"./components/mouse-position/mouse-position.component\";\nfunction AppComponent_option_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const graveyard_r1 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", graveyard_r1.value);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(graveyard_r1.label);\n  }\n}\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(geojsonService) {\n      _defineProperty(this, \"geojsonService\", void 0);\n      _defineProperty(this, \"map\", void 0);\n      _defineProperty(this, \"view\", void 0);\n      _defineProperty(this, \"graveyardLayer\", \"assets/data/test_data1.geojson\");\n      _defineProperty(this, \"graveyardData\", void 0);\n      _defineProperty(this, \"graveyardList\", void 0);\n      _defineProperty(this, \"graveyards\", []);\n      _defineProperty(this, \"selectedGraveyard\", void 0);\n      _defineProperty(this, \"geojsonLayer\", void 0);\n      this.geojsonService = geojsonService;\n    }\n    ngOnInit() {\n      this.view = new View({\n        center: [769185.7564, 6566132.7095],\n        zoom: 13\n      });\n      this.map = new Map({\n        target: 'map',\n        layers: [new TileLayer({\n          source: new OSM()\n        }), new VectorLayer({\n          source: new VectorSource({\n            url: this.graveyardLayer,\n            format: new GeoJSON()\n          })\n        })],\n        view: this.view\n      });\n      // this.geojsonService.getGeojson().subscribe(data => {\n      //   console.log(data); // GeoJSON data\n      // });\n      this.geojsonService.getGeojson().subscribe(geojson => {\n        // Parse the geojson data and extract the graveyards\n        const features = geojson.features;\n        const graveyards = new Set();\n        features.forEach(feature => {\n          graveyards.add(feature.properties.friedhof);\n        });\n        // Convert the set to an array and sort it alphabetically\n        const graveyardArray = Array.from(graveyards);\n        graveyardArray.sort();\n        // Create an array of objects for the dropdown menu\n        this.graveyards = graveyardArray.map(graveyard => {\n          return {\n            label: graveyard,\n            value: graveyard\n          };\n        });\n      });\n    }\n    onGraveyardSelected(value) {\n      // Save the selected graveyard and zoom to its extent\n      console.log(value);\n      this.selectedGraveyard = value;\n      const features = this.geojsonLayer.getSource().getFeatures();\n      features.forEach(feature => {\n        if (feature.getProperties().friedhof === value) {\n          const extent = feature.getGeometry().getExtent();\n          this.view.fit(extent, {\n            duration: 1000\n          });\n        }\n      });\n    }\n  }\n  _defineProperty(AppComponent, \"\\u0275fac\", function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.GeojsonService));\n  });\n  _defineProperty(AppComponent, \"\\u0275cmp\", /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 14,\n    vars: 4,\n    consts: [[1, \"title\"], [1, \"left-bar\"], [3, \"change\"], [\"value\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"map-container\"], [3, \"map\"], [\"positionTemplate\", \"{x}, {y} m\", 3, \"map\"], [3, \"value\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"header\")(1, \"div\", 0);\n        i0.ɵɵtext(2, \"Openlayers with Angular\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(3, \"main\")(4, \"div\", 1)(5, \"select\", 2);\n        i0.ɵɵlistener(\"change\", function AppComponent_Template_select_change_5_listener($event) {\n          return ctx.onGraveyardSelected($event.target.value);\n        });\n        i0.ɵɵelementStart(6, \"option\", 3);\n        i0.ɵɵtext(7, \"Select a graveyard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(8, AppComponent_option_8_Template, 2, 2, \"option\", 4);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(9, \"div\", 5);\n        i0.ɵɵelement(10, \"app-map\", 6);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(11, \"footer\");\n        i0.ɵɵelement(12, \"app-scaleline\", 6)(13, \"app-mouse-position\", 7);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.graveyards);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"map\", ctx.map);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"map\", ctx.map);\n      }\n    },\n    dependencies: [i2.NgForOf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i4.MapComponent, i5.ScalelineComponent, i6.MousePositionComponent],\n    styles: [\"[_nghost-%COMP%]{display:flex;flex-direction:column;height:100vh}header[_ngcontent-%COMP%]{background-color:var(--header-color);padding:2em}header[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{font-size:28px}main[_ngcontent-%COMP%]{display:flex;flex-grow:1}.left-bar[_ngcontent-%COMP%]{width:20em;background-color:var(--sidebar-color)}.map-container[_ngcontent-%COMP%]{flex-grow:1}footer[_ngcontent-%COMP%]{display:flex;background-color:var(--header-color);padding:1em;justify-content:space-between}\"]\n  }));\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}