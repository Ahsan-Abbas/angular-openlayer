{"ast":null,"code":"import _defineProperty from \"D:/Angular Projects/angular-openlayers/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport { Style, Fill, Stroke } from 'ol/style';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let DropdownService = /*#__PURE__*/(() => {\n  class DropdownService {\n    constructor(http) {\n      _defineProperty(this, \"http\", void 0);\n      _defineProperty(this, \"geojsonUrl\", 'assets/data/test_data1.geojson');\n      _defineProperty(this, \"geojsonData\", void 0);\n      this.http = http;\n    }\n    getDropdownData() {\n      return this.http.get(this.geojsonUrl);\n    }\n    // Style graves based on grabstatus\n    getGraveStyleFunction() {\n      this.geojsonData = this.getDropdownData();\n      const grabstatusValues = [...new Set(this.geojsonData.features.map(feature => feature.properties.grabstatus))];\n      const styles = {};\n      grabstatusValues.forEach(value => {\n        const color = `rgba(${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, ${Math.floor(Math.random() * 256)}, 0.6)`;\n        styles[value] = new Style({\n          fill: new Fill({\n            color\n          }),\n          stroke: new Stroke({\n            color: '#333',\n            width: 1\n          })\n        });\n      });\n      return (feature, resolution) => styles[feature.get('grabstatus')];\n    }\n  }\n  _defineProperty(DropdownService, \"\\u0275fac\", function DropdownService_Factory(t) {\n    return new (t || DropdownService)(i0.ɵɵinject(i1.HttpClient));\n  });\n  _defineProperty(DropdownService, \"\\u0275prov\", /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: DropdownService,\n    factory: DropdownService.ɵfac,\n    providedIn: 'root'\n  }));\n  return DropdownService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}